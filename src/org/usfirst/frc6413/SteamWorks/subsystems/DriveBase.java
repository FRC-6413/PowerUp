// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6413.SteamWorks.subsystems;

import java.math.BigDecimal;
import java.math.RoundingMode;

import org.usfirst.frc6413.SteamWorks.RobotMap;
import org.usfirst.frc6413.SteamWorks.commands.*;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveBase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController lFM = RobotMap.driveBaseLFM;
    private final SpeedController lRM = RobotMap.driveBaseLRM;
    private final SpeedController rFM = RobotMap.driveBaseRFM;
    private final SpeedController rRM = RobotMap.driveBaseRRM;
    private final RobotDrive robotDrive41 = RobotMap.driveBaseRobotDrive41;
    private final AnalogInput rearUltrasonic = RobotMap.driveBaseRearUltrasonic;
    private final AnalogInput frontUltrasonic = RobotMap.driveBaseFrontUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final AHRS ahrs = RobotMap.ahrs;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new MecanumDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void mecanumDrive(XboxController controller) {
    	double x = deadZoneInput(controller.getX(GenericHID.Hand.kLeft), .3);
    	double y = deadZoneInput(controller.getY(GenericHID.Hand.kLeft), .1) * .5;
    	double rotation = deadZoneInput(controller.getX(GenericHID.Hand.kRight), .1) * .7;
    	
    	robotDrive41.mecanumDrive_Cartesian(x, y, rotation, 0);
    }
    
    public void driveForward(double speed) {
    	// need to reverse the right side, due to setup of mecanum drive
    	robotDrive41.tankDrive(speed, -speed);
    }
    
    public double getDistanceBehind() {
    	return rearUltrasonic.getAverageVoltage();
    }
    
    public double getDistanceAhead() {
    	return frontUltrasonic.getAverageVoltage();
    }
    
    public void rotateToDegree(double degree) {
    	
    }
    
    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }
    
    
    private double deadZoneInput(double input, double deadZone) {
    	if(input <= deadZone && input >= -deadZone)
    		return 0;
    	else if(input >= deadZone) 
    		input = ((input-deadZone)/(1-deadZone));
    	else if(input <= deadZone)
    		input = ((-input-deadZone)/(deadZone-1));
    		
    	return round(input, 2);
    }
}

