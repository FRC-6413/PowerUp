// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6413.SteamWorks;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveBaseLFM;
    public static SpeedController driveBaseLRM;
    public static SpeedController driveBaseRFM;
    public static SpeedController driveBaseRRM;
    public static RobotDrive driveBaseRobotDrive41;
    public static AnalogInput driveBaseRearUltrasonic;
    public static AnalogInput driveBaseFrontUltrasonic;
    public static Compressor armCompressor;
    public static DoubleSolenoid armUpDown;
    public static DoubleSolenoid armOpenClose;
    public static DigitalInput armGearTrigger;
    public static SpeedController winchSpeedController1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AHRS ahrs;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseLFM = new Spark(0);
        LiveWindow.addActuator("DriveBase", "LFM", (Spark) driveBaseLFM);
        
        driveBaseLRM = new Spark(1);
        LiveWindow.addActuator("DriveBase", "LRM", (Spark) driveBaseLRM);
        
        driveBaseRFM = new Spark(2);
        LiveWindow.addActuator("DriveBase", "RFM", (Spark) driveBaseRFM);
        
        driveBaseRRM = new Spark(3);
        LiveWindow.addActuator("DriveBase", "RRM", (Spark) driveBaseRRM);
        
        driveBaseRobotDrive41 = new RobotDrive(driveBaseLFM, driveBaseLRM,
              driveBaseRFM, driveBaseRRM);
        
        driveBaseRobotDrive41.setSafetyEnabled(true);
        driveBaseRobotDrive41.setExpiration(0.1);
        driveBaseRobotDrive41.setSensitivity(0.5);
        driveBaseRobotDrive41.setMaxOutput(1.0);
        
        driveBaseRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveBaseRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);        

        driveBaseRearUltrasonic = new AnalogInput(0);
        LiveWindow.addSensor("DriveBase", "Rear Ultrasonic", driveBaseRearUltrasonic);
        
        driveBaseFrontUltrasonic = new AnalogInput(1);
        LiveWindow.addSensor("DriveBase", "Front Ultrasonic", driveBaseFrontUltrasonic);
        
        armCompressor = new Compressor(0);
        
        
        armUpDown = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Arm", "UpDown", armUpDown);
        
        armOpenClose = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Arm", "OpenClose", armOpenClose);
        
        armGearTrigger = new DigitalInput(0);
        LiveWindow.addSensor("Arm", "Gear Trigger", armGearTrigger);
        
        winchSpeedController1 = new VictorSP(4);
        LiveWindow.addActuator("Winch", "Speed Controller 1", (VictorSP) winchSpeedController1);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        ahrs = new AHRS(SPI.Port.kMXP);
        LiveWindow.addSensor("DriveBase", "Navx", ahrs);
    }
}
