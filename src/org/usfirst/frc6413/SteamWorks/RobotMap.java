// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6413.SteamWorks;

import edu.wpi.cscore.UsbCamera;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import java.util.Date;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveBaseLFM;
    public static CANTalon driveBaseLRM;
    public static CANTalon driveBaseRFM;
    public static CANTalon driveBaseRRM;
    public static RobotDrive driveBaseRobotDrive41;
    //public static AnalogInput driveBaseRearUltrasonic;
    public static AnalogInput driveBaseFrontUltrasonic;
    public static Compressor armCompressor;
    public static DoubleSolenoid armUpDown;
    public static DoubleSolenoid armOpenClose;
    public static DigitalInput armGearTrigger;
    //public static DigitalInput armGearTriggerTest;
    public static SpeedController winchSpeedController1;
    //public static CameraServer cameraServer;
    public static boolean ArmIsUp = true;
    public static boolean JawsClosed = true;
    public static boolean ArmDownDebounce = false;
    public static Date ArmDownTime = new Date();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AHRS ahrs;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	double fValue = 1.9;
    	double pValue = 0.15;
    	double iValue = 0.0;
    	double dValue = 1.5;
    	
    	int cpr = 80;
    	
        driveBaseLFM = new CANTalon(1);
        LiveWindow.addActuator("DriveBase", "LFM", (CANTalon) driveBaseLFM);
        
        driveBaseLRM = new CANTalon(3);
        LiveWindow.addActuator("DriveBase", "LRM", (CANTalon) driveBaseLRM);
        
        driveBaseRFM = new CANTalon(0);
        LiveWindow.addActuator("DriveBase", "RFM", (CANTalon) driveBaseRFM);
        
        driveBaseRRM = new CANTalon(2);
        LiveWindow.addActuator("DriveBase", "RRM", (CANTalon) driveBaseRRM);
        
        driveBaseLFM.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        driveBaseLFM.reverseSensor(false);
        driveBaseLFM.configEncoderCodesPerRev(cpr);
        
        driveBaseLFM.configNominalOutputVoltage(+0.0f, -0.0f);
        driveBaseLFM.configPeakOutputVoltage(+12.0f, -12.0f);
        
        driveBaseLFM.setProfile(0);
        driveBaseLFM.setF(fValue);
        driveBaseLFM.setP(pValue);
        driveBaseLFM.setI(iValue);
        driveBaseLFM.setD(dValue);
        
        
        driveBaseLRM.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        driveBaseLRM.reverseSensor(false);
        driveBaseLRM.configEncoderCodesPerRev(cpr);
        
        driveBaseLRM.configNominalOutputVoltage(+0.0f, -0.0f);
        driveBaseLRM.configPeakOutputVoltage(+12.0f, -12.0f);
        
        driveBaseLRM.setProfile(0);
        driveBaseLRM.setF(fValue);
        driveBaseLRM.setP(pValue);
        driveBaseLRM.setI(iValue);
        driveBaseLRM.setD(dValue);
        
        
        driveBaseRFM.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        driveBaseRFM.reverseSensor(false);
        driveBaseRFM.configEncoderCodesPerRev(cpr);
        
        driveBaseRFM.configNominalOutputVoltage(+0.0f, -0.0f);
        driveBaseRFM.configPeakOutputVoltage(+12.0f, -12.0f);
        
        driveBaseRFM.setProfile(0);
        driveBaseRFM.setF(fValue);
        driveBaseRFM.setP(pValue);
        driveBaseRFM.setI(iValue);
        driveBaseRFM.setD(dValue);
        
        
        driveBaseRRM.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        driveBaseRRM.reverseSensor(false);
        driveBaseRRM.configEncoderCodesPerRev(cpr);
        
        driveBaseRRM.configNominalOutputVoltage(+0.0f, -0.0f);
        driveBaseRRM.configPeakOutputVoltage(+12.0f, -12.0f);
        
        driveBaseRRM.setProfile(0);
        driveBaseRRM.setF(fValue);
        driveBaseRRM.setP(pValue);
        driveBaseRRM.setI(iValue);
        driveBaseRRM.setD(dValue);
        
        
        
        driveBaseRobotDrive41 = new RobotDrive(driveBaseLFM, driveBaseLRM,
              driveBaseRFM, driveBaseRRM);
        
        driveBaseRobotDrive41.setSafetyEnabled(true);
        driveBaseRobotDrive41.setExpiration(0.1);
        driveBaseRobotDrive41.setSensitivity(0.5);
        driveBaseRobotDrive41.setMaxOutput(1.0);
        
        driveBaseRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveBaseRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);        

        //driveBaseRearUltrasonic = new AnalogInput(0);
        //LiveWindow.addSensor("DriveBase", "Rear Ultrasonic", driveBaseRearUltrasonic);
        
        driveBaseFrontUltrasonic = new AnalogInput(1);
        LiveWindow.addSensor("DriveBase", "Front Ultrasonic", driveBaseFrontUltrasonic);
        
        armCompressor = new Compressor(0);
        
        
        armUpDown = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Arm", "UpDown", armUpDown);
        
        armOpenClose = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Arm", "OpenClose", armOpenClose);
        
        armGearTrigger = new DigitalInput(0);
        LiveWindow.addSensor("Arm", "Gear Trigger", armGearTrigger);
        
        winchSpeedController1 = new VictorSP(0);
        LiveWindow.addActuator("Winch", "Speed Controller 1", (VictorSP) winchSpeedController1);
        
        new Thread(() -> {
        	CameraServer cs = CameraServer.getInstance();
        		
       		UsbCamera usb1 = cs.startAutomaticCapture(0);
       		usb1.setResolution(320, 240);
       		usb1.setFPS(10);
       		
       		UsbCamera usb2 = cs.startAutomaticCapture(1);
       		usb2.setResolution(160, 120);
       		usb2.setFPS(10);
        }).start();
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        ahrs = new AHRS(SPI.Port.kMXP);
        //LiveWindow.addSensor("DriveBase", "Navx", ahrs);
    }
    
}