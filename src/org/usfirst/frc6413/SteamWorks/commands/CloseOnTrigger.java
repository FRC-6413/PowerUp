package org.usfirst.frc6413.SteamWorks.commands;

import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.command.Command;

import java.util.Date;

import org.usfirst.frc6413.SteamWorks.Robot;
import org.usfirst.frc6413.SteamWorks.RobotMap;

public class CloseOnTrigger extends Command {
	boolean debounceTrigger = false;
	long debounceTimer = 500; // in seconds
	
	public CloseOnTrigger() {
		
	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

	        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	        requires(Robot.arm);

	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	    }

	    // Called just before this Command runs the first time
	    protected void initialize() {	    	
	    	debounceTrigger = true;
	    	//System.out.println("armStatus: " + RobotMap.ArmIsUp + ", Jaws status: " + RobotMap.JawsClosed);
	    	Date now = new Date();
	    	long elasped = now.getTime() - RobotMap.ArmDownTime.getTime();
	    	System.out.println("elasped: " + elasped);
	    	if(RobotMap.JawsClosed == false && RobotMap.ArmIsUp == false && elasped > debounceTimer) {	 
	    		//debounceTrigger = true;
    			//setTimeout(debounceTimer);
    			//System.out.println("switch pressed"); 
	    		
	    		Robot.arm.closeArm();
	    		RobotMap.JawsClosed = true;
	    		//System.out.println("Closing arm on trigger");
	    		
	    		new Thread(() -> {	    			
	        		try {
	        			Robot.oi.driveJoystick.setRumble(RumbleType.kLeftRumble, 1);
		        		Robot.oi.armJoystick.setRumble(RumbleType.kLeftRumble, 1);
		        		
						Thread.sleep(500);
					} catch (InterruptedException e) {
						System.out.println("rubble went wrong!");
					}
	        		finally {
	        			Robot.oi.driveJoystick.setRumble(RumbleType.kLeftRumble, 0);
		        		Robot.oi.armJoystick.setRumble(RumbleType.kLeftRumble, 0);
	        		}
	        		
	    		}).start();
	    	}
	    }

	    // Called repeatedly when this Command is scheduled to run
	    protected void execute() {
	    	  	//if(!RobotMap.armGearTrigger.get()) {
	    	  	//	debounceTrigger = false;
	    	  	//	System.out.println("switch let up before timeout");
	    	  	//}
	    }

	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	        //return isTimedOut() || !debounceTrigger;
	    	return true;
	    }

	    // Called once after isFinished returns true
	    protected void end() {
	    	//System.out.println("end: " + debounceTrigger);
	    	//if(debounceTrigger) {	    		
	    		
	    	//}	    	
	    	//System.out.println("debounced!");
	    }

	    // Called when another command which requires one or more of the same
	    // subsystems is scheduled to run
	    protected void interrupted() {
	    	end();
	    }
}
