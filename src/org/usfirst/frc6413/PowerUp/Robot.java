// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6413.PowerUp;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6413.PowerUp.commands.*;
import org.usfirst.frc6413.PowerUp.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static BoxElevator boxElevator;
    public static IntakeElevator intakeElevator;
    public static BoxIntake boxIntake;
    public static BoxIntakeArms boxIntakeArms;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    SendableChooser<Command> autonomousChooser;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        boxElevator = new BoxElevator();
        intakeElevator = new IntakeElevator();
        boxIntake = new BoxIntake();
        boxIntakeArms = new BoxIntakeArms();
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        autonomousChooser = new SendableChooser<Command>();
        //autonomousChooser.addDefault("Drive Forward", new AutonomousCommand());
        autonomousChooser.addDefault("Left Start", new LeftSide());
        autonomousChooser.addObject("Right Start", new RightSide());
        autonomousChooser.addObject("Drive straight", new DriveForwardTimed());
        autonomousChooser.addObject("Left Start Expel Box", new DriveForwardExpelCubeLeft());
        autonomousChooser.addObject("Right Start Expel Box", new DriveForwardExpelCubeRight());
        
        SmartDashboard.putData("Autonomous Mode", autonomousChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	RobotMap.alliance = DriverStation.getInstance().getAlliance();
    	RobotMap.gameData = DriverStation.getInstance().getGameSpecificMessage();
    	
    	System.out.println("FMS: " + RobotMap.gameData);
        // schedule the autonomous command (example)
    	autonomousCommand = (Command)autonomousChooser.getSelected();
        if (autonomousCommand != null) autonomousCommand.start();
        //System.out.println(autonomousCommand);
        
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        new ShiftLowGear();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        //LiveWindow.run();
    	//Says it was deprecated but Google says no longer required. Ask Dave
    }
}
