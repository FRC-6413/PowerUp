// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6413.PowerUp;

import edu.wpi.cscore.UsbCamera;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

import java.util.Date;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveBaseLFM;
    public static WPI_TalonSRX driveBaseLRM;
    public static WPI_TalonSRX driveBaseLMM;
    public static WPI_TalonSRX driveBaseRFM;
    public static WPI_TalonSRX driveBaseRRM;
    public static WPI_TalonSRX driveBaseRMM;
    public static DifferentialDrive driveBaseRobotDrive41;
    //public static AnalogInput driveBaseRearUltrasonic;
    public static AnalogInput driveBaseFrontUltrasonic;
    public static Compressor compressor;
    public static DoubleSolenoid shifterSolenoid;
    //public static DigitalInput armGearTriggerTest;
    public static SpeedController winchSpeedController1;
    //public static CameraServer cameraServer;
    public static boolean ArmIsUp = true;
    public static boolean JawsClosed = true;
    public static boolean ArmDownDebounce = false;
    public static Date ArmDownTime = new Date();
    
    public static VictorSP ElevatorController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AHRS ahrs;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	double fValue = 1.9;
    	double pValue = 0.15;
    	double iValue = 0.0;
    	double dValue = 1.5;
    	
    	//int cpr = 80;
    	
        driveBaseRMM = new WPI_TalonSRX(3);
        //LiveWindow.addActuator("DriveBase", "LFM", (TalonSRX) driveBaseLFM);

        driveBaseRFM = new WPI_TalonSRX(4);
        
        driveBaseRRM = new WPI_TalonSRX(5);
        //LiveWindow.addActuator("DriveBase", "RFM", (TalonSRX) driveBaseRFM);
        
        driveBaseLFM = new WPI_TalonSRX(0);
        //LiveWindow.addActuator("DriveBase", "LRM", (TalonSRX) driveBaseLRM);
        
        driveBaseLMM = new WPI_TalonSRX(1);
        //LiveWindow.addActuator("DriveBase", "RRM", (TalonSRX) driveBaseRRM);
        
        driveBaseLRM = new WPI_TalonSRX(2);
        
        
        
        SpeedControllerGroup left = new SpeedControllerGroup(driveBaseLFM, driveBaseLRM, driveBaseLMM);
        SpeedControllerGroup right = new SpeedControllerGroup(driveBaseRFM, driveBaseRRM, driveBaseRMM);
        
        driveBaseRMM.setInverted(true);
        driveBaseLMM.setInverted(true);
        
                
        //driveBaseLFM.follow(driveBaseLRM);
        //driveBaseLMM.follow(driveBaseLRM);
        
        
        //driveBaseRFM.follow(driveBaseRRM);
        //driveBaseRMM.follow(driveBaseRRM);
        
        driveBaseRobotDrive41 = new DifferentialDrive(left, right);
        
        compressor = new Compressor(0);
        
        shifterSolenoid = new DoubleSolenoid(0, 0, 1);
        
         driveBaseLFM.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseLFM.setInverted(false);
        //driveBaseLFM.configEncoderCodesPerRev(cpr);
        //Ask Dave
        
        driveBaseLFM.configPeakOutputForward(+0.0f, -0);
        driveBaseLFM.configPeakOutputReverse(+12.0f, -12);
        
        driveBaseLFM.selectProfileSlot(0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseLFM.config_kF(0, fValue, 0);
        driveBaseLFM.config_kP(0, pValue, 0);
        driveBaseLFM.config_kI(0, iValue, 0);
        driveBaseLFM.config_kD(0, dValue, 0);
        
        
        driveBaseLRM.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseLRM.setInverted(false);
        //driveBaseLFM.configEncoderCodesPerRev(cpr);
        //Ask Dave
        
        driveBaseLRM.configPeakOutputForward(+0.0f, -0);
        driveBaseLRM.configPeakOutputReverse(+12.0f, -12);
        
        driveBaseLRM.selectProfileSlot(0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseLRM.config_kF(0, fValue, 0);
        driveBaseLRM.config_kP(0, pValue, 0);
        driveBaseLRM.config_kI(0, iValue, 0);
        driveBaseLRM.config_kD(0, dValue, 0);
        
        
        driveBaseRFM.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseRFM.setInverted(false);
        //driveBaseLFM.configEncoderCodesPerRev(cpr);
        //Ask Dave
        
        driveBaseRFM.configPeakOutputForward(+0.0f, -0);
        driveBaseRFM.configPeakOutputReverse(+12.0f, -12);
        
        driveBaseRFM.selectProfileSlot(0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseRFM.config_kF(0, fValue, 0);
        driveBaseRFM.config_kP(0, pValue, 0);
        driveBaseRFM.config_kI(0, iValue, 0);
        driveBaseRFM.config_kD(0, dValue, 0);
        
        
        driveBaseRRM.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseRRM.setInverted(false);
        //driveBaseLFM.configEncoderCodesPerRev(cpr);
        //Ask Dave
        
        driveBaseRRM.configPeakOutputForward(+0.0f, -0);
        driveBaseRRM.configPeakOutputReverse(+12.0f, -12);
        
        driveBaseRRM.selectProfileSlot(0, 0);
        //0.0 as a placeholder. Ask Dave
        driveBaseRRM.config_kF(0, fValue, 0);
        driveBaseRRM.config_kP(0, pValue, 0);
        driveBaseRRM.config_kI(0, iValue, 0);
        driveBaseRRM.config_kD(0, dValue, 0); 
        
        //elevator stuff
        ElevatorController = new VictorSP(0);
        
        
        //driveBaseRobotDrive41.setSafetyEnabled(true);
        //driveBaseRobotDrive41.setExpiration(0.1);
        //driveBaseRobotDrive41.setSensitivity(0.5);
        //Look up sensitivity for new MechanumDrive(). Ask Dave
        //driveBaseRobotDrive41.setMaxOutput(1.0);
        
        //driveBaseRobotDrive41.setInvertedMotor(MecanumDrive.MotorType.kRearRight, true);
        //driveBaseRobotDrive41.setInvertedMotor(MecanumDrive.MotorType.kFrontRight, true);   
        //Ask Dave

        //driveBaseRearUltrasonic = new AnalogInput(0);
        //LiveWindow.addSensor("DriveBase", "Rear Ultrasonic", driveBaseRearUltrasonic);
        
        //driveBaseFrontUltrasonic = new AnalogInput(1);
        //LiveWindow.addSensor("DriveBase", "Front Ultrasonic", driveBaseFrontUltrasonic);
        //Ask Dave
        
        /* new Thread(() -> {
        	CameraServer cs = CameraServer.getInstance();
        		
       		UsbCamera usb1 = cs.startAutomaticCapture(0);
       		usb1.setResolution(320, 240);
       		usb1.setFPS(10);
       		
       		UsbCamera usb2 = cs.startAutomaticCapture(1);
       		usb2.setResolution(160, 120);
       		usb2.setFPS(10);
        }).start(); */
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //ahrs = new AHRS(SPI.Port.kMXP);
        //LiveWindow.addSensor("DriveBase", "Navx", ahrs);
    }
    
}